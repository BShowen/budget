
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TransactionSplit` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TransactionSplit
 * 
 */
export type TransactionSplitModel = runtime.Types.Result.DefaultSelection<Prisma.$TransactionSplitPayload>

export type AggregateTransactionSplit = {
  _count: TransactionSplitCountAggregateOutputType | null
  _avg: TransactionSplitAvgAggregateOutputType | null
  _sum: TransactionSplitSumAggregateOutputType | null
  _min: TransactionSplitMinAggregateOutputType | null
  _max: TransactionSplitMaxAggregateOutputType | null
}

export type TransactionSplitAvgAggregateOutputType = {
  amount: runtime.Decimal | null
}

export type TransactionSplitSumAggregateOutputType = {
  amount: runtime.Decimal | null
}

export type TransactionSplitMinAggregateOutputType = {
  id: string | null
  amount: runtime.Decimal | null
  transactionId: string | null
  categoryId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TransactionSplitMaxAggregateOutputType = {
  id: string | null
  amount: runtime.Decimal | null
  transactionId: string | null
  categoryId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TransactionSplitCountAggregateOutputType = {
  id: number
  amount: number
  transactionId: number
  categoryId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type TransactionSplitAvgAggregateInputType = {
  amount?: true
}

export type TransactionSplitSumAggregateInputType = {
  amount?: true
}

export type TransactionSplitMinAggregateInputType = {
  id?: true
  amount?: true
  transactionId?: true
  categoryId?: true
  createdAt?: true
  updatedAt?: true
}

export type TransactionSplitMaxAggregateInputType = {
  id?: true
  amount?: true
  transactionId?: true
  categoryId?: true
  createdAt?: true
  updatedAt?: true
}

export type TransactionSplitCountAggregateInputType = {
  id?: true
  amount?: true
  transactionId?: true
  categoryId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type TransactionSplitAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TransactionSplit to aggregate.
   */
  where?: Prisma.TransactionSplitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TransactionSplits to fetch.
   */
  orderBy?: Prisma.TransactionSplitOrderByWithRelationInput | Prisma.TransactionSplitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TransactionSplitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TransactionSplits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TransactionSplits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TransactionSplits
  **/
  _count?: true | TransactionSplitCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TransactionSplitAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TransactionSplitSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TransactionSplitMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TransactionSplitMaxAggregateInputType
}

export type GetTransactionSplitAggregateType<T extends TransactionSplitAggregateArgs> = {
      [P in keyof T & keyof AggregateTransactionSplit]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTransactionSplit[P]>
    : Prisma.GetScalarType<T[P], AggregateTransactionSplit[P]>
}




export type TransactionSplitGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransactionSplitWhereInput
  orderBy?: Prisma.TransactionSplitOrderByWithAggregationInput | Prisma.TransactionSplitOrderByWithAggregationInput[]
  by: Prisma.TransactionSplitScalarFieldEnum[] | Prisma.TransactionSplitScalarFieldEnum
  having?: Prisma.TransactionSplitScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TransactionSplitCountAggregateInputType | true
  _avg?: TransactionSplitAvgAggregateInputType
  _sum?: TransactionSplitSumAggregateInputType
  _min?: TransactionSplitMinAggregateInputType
  _max?: TransactionSplitMaxAggregateInputType
}

export type TransactionSplitGroupByOutputType = {
  id: string
  amount: runtime.Decimal
  transactionId: string
  categoryId: string | null
  createdAt: Date
  updatedAt: Date
  _count: TransactionSplitCountAggregateOutputType | null
  _avg: TransactionSplitAvgAggregateOutputType | null
  _sum: TransactionSplitSumAggregateOutputType | null
  _min: TransactionSplitMinAggregateOutputType | null
  _max: TransactionSplitMaxAggregateOutputType | null
}

type GetTransactionSplitGroupByPayload<T extends TransactionSplitGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TransactionSplitGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TransactionSplitGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TransactionSplitGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TransactionSplitGroupByOutputType[P]>
      }
    >
  > 



export type TransactionSplitWhereInput = {
  AND?: Prisma.TransactionSplitWhereInput | Prisma.TransactionSplitWhereInput[]
  OR?: Prisma.TransactionSplitWhereInput[]
  NOT?: Prisma.TransactionSplitWhereInput | Prisma.TransactionSplitWhereInput[]
  id?: Prisma.StringFilter<"TransactionSplit"> | string
  amount?: Prisma.DecimalFilter<"TransactionSplit"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  transactionId?: Prisma.StringFilter<"TransactionSplit"> | string
  categoryId?: Prisma.StringNullableFilter<"TransactionSplit"> | string | null
  createdAt?: Prisma.DateTimeFilter<"TransactionSplit"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TransactionSplit"> | Date | string
  transaction?: Prisma.XOR<Prisma.TransactionScalarRelationFilter, Prisma.TransactionWhereInput>
  category?: Prisma.XOR<Prisma.CategoryNullableScalarRelationFilter, Prisma.CategoryWhereInput> | null
}

export type TransactionSplitOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  transactionId?: Prisma.SortOrder
  categoryId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  transaction?: Prisma.TransactionOrderByWithRelationInput
  category?: Prisma.CategoryOrderByWithRelationInput
}

export type TransactionSplitWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TransactionSplitWhereInput | Prisma.TransactionSplitWhereInput[]
  OR?: Prisma.TransactionSplitWhereInput[]
  NOT?: Prisma.TransactionSplitWhereInput | Prisma.TransactionSplitWhereInput[]
  amount?: Prisma.DecimalFilter<"TransactionSplit"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  transactionId?: Prisma.StringFilter<"TransactionSplit"> | string
  categoryId?: Prisma.StringNullableFilter<"TransactionSplit"> | string | null
  createdAt?: Prisma.DateTimeFilter<"TransactionSplit"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TransactionSplit"> | Date | string
  transaction?: Prisma.XOR<Prisma.TransactionScalarRelationFilter, Prisma.TransactionWhereInput>
  category?: Prisma.XOR<Prisma.CategoryNullableScalarRelationFilter, Prisma.CategoryWhereInput> | null
}, "id">

export type TransactionSplitOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  transactionId?: Prisma.SortOrder
  categoryId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TransactionSplitCountOrderByAggregateInput
  _avg?: Prisma.TransactionSplitAvgOrderByAggregateInput
  _max?: Prisma.TransactionSplitMaxOrderByAggregateInput
  _min?: Prisma.TransactionSplitMinOrderByAggregateInput
  _sum?: Prisma.TransactionSplitSumOrderByAggregateInput
}

export type TransactionSplitScalarWhereWithAggregatesInput = {
  AND?: Prisma.TransactionSplitScalarWhereWithAggregatesInput | Prisma.TransactionSplitScalarWhereWithAggregatesInput[]
  OR?: Prisma.TransactionSplitScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TransactionSplitScalarWhereWithAggregatesInput | Prisma.TransactionSplitScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TransactionSplit"> | string
  amount?: Prisma.DecimalWithAggregatesFilter<"TransactionSplit"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  transactionId?: Prisma.StringWithAggregatesFilter<"TransactionSplit"> | string
  categoryId?: Prisma.StringNullableWithAggregatesFilter<"TransactionSplit"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TransactionSplit"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TransactionSplit"> | Date | string
}

export type TransactionSplitCreateInput = {
  id?: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  createdAt?: Date | string
  updatedAt?: Date | string
  transaction: Prisma.TransactionCreateNestedOneWithoutSplitsInput
  category?: Prisma.CategoryCreateNestedOneWithoutTransactionsInput
}

export type TransactionSplitUncheckedCreateInput = {
  id?: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  transactionId: string
  categoryId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TransactionSplitUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transaction?: Prisma.TransactionUpdateOneRequiredWithoutSplitsNestedInput
  category?: Prisma.CategoryUpdateOneWithoutTransactionsNestedInput
}

export type TransactionSplitUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  transactionId?: Prisma.StringFieldUpdateOperationsInput | string
  categoryId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransactionSplitCreateManyInput = {
  id?: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  transactionId: string
  categoryId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TransactionSplitUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransactionSplitUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  transactionId?: Prisma.StringFieldUpdateOperationsInput | string
  categoryId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransactionSplitListRelationFilter = {
  every?: Prisma.TransactionSplitWhereInput
  some?: Prisma.TransactionSplitWhereInput
  none?: Prisma.TransactionSplitWhereInput
}

export type TransactionSplitOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TransactionSplitCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  transactionId?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TransactionSplitAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type TransactionSplitMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  transactionId?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TransactionSplitMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  transactionId?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TransactionSplitSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type TransactionSplitCreateNestedManyWithoutCategoryInput = {
  create?: Prisma.XOR<Prisma.TransactionSplitCreateWithoutCategoryInput, Prisma.TransactionSplitUncheckedCreateWithoutCategoryInput> | Prisma.TransactionSplitCreateWithoutCategoryInput[] | Prisma.TransactionSplitUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.TransactionSplitCreateOrConnectWithoutCategoryInput | Prisma.TransactionSplitCreateOrConnectWithoutCategoryInput[]
  createMany?: Prisma.TransactionSplitCreateManyCategoryInputEnvelope
  connect?: Prisma.TransactionSplitWhereUniqueInput | Prisma.TransactionSplitWhereUniqueInput[]
}

export type TransactionSplitUncheckedCreateNestedManyWithoutCategoryInput = {
  create?: Prisma.XOR<Prisma.TransactionSplitCreateWithoutCategoryInput, Prisma.TransactionSplitUncheckedCreateWithoutCategoryInput> | Prisma.TransactionSplitCreateWithoutCategoryInput[] | Prisma.TransactionSplitUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.TransactionSplitCreateOrConnectWithoutCategoryInput | Prisma.TransactionSplitCreateOrConnectWithoutCategoryInput[]
  createMany?: Prisma.TransactionSplitCreateManyCategoryInputEnvelope
  connect?: Prisma.TransactionSplitWhereUniqueInput | Prisma.TransactionSplitWhereUniqueInput[]
}

export type TransactionSplitUpdateManyWithoutCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.TransactionSplitCreateWithoutCategoryInput, Prisma.TransactionSplitUncheckedCreateWithoutCategoryInput> | Prisma.TransactionSplitCreateWithoutCategoryInput[] | Prisma.TransactionSplitUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.TransactionSplitCreateOrConnectWithoutCategoryInput | Prisma.TransactionSplitCreateOrConnectWithoutCategoryInput[]
  upsert?: Prisma.TransactionSplitUpsertWithWhereUniqueWithoutCategoryInput | Prisma.TransactionSplitUpsertWithWhereUniqueWithoutCategoryInput[]
  createMany?: Prisma.TransactionSplitCreateManyCategoryInputEnvelope
  set?: Prisma.TransactionSplitWhereUniqueInput | Prisma.TransactionSplitWhereUniqueInput[]
  disconnect?: Prisma.TransactionSplitWhereUniqueInput | Prisma.TransactionSplitWhereUniqueInput[]
  delete?: Prisma.TransactionSplitWhereUniqueInput | Prisma.TransactionSplitWhereUniqueInput[]
  connect?: Prisma.TransactionSplitWhereUniqueInput | Prisma.TransactionSplitWhereUniqueInput[]
  update?: Prisma.TransactionSplitUpdateWithWhereUniqueWithoutCategoryInput | Prisma.TransactionSplitUpdateWithWhereUniqueWithoutCategoryInput[]
  updateMany?: Prisma.TransactionSplitUpdateManyWithWhereWithoutCategoryInput | Prisma.TransactionSplitUpdateManyWithWhereWithoutCategoryInput[]
  deleteMany?: Prisma.TransactionSplitScalarWhereInput | Prisma.TransactionSplitScalarWhereInput[]
}

export type TransactionSplitUncheckedUpdateManyWithoutCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.TransactionSplitCreateWithoutCategoryInput, Prisma.TransactionSplitUncheckedCreateWithoutCategoryInput> | Prisma.TransactionSplitCreateWithoutCategoryInput[] | Prisma.TransactionSplitUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.TransactionSplitCreateOrConnectWithoutCategoryInput | Prisma.TransactionSplitCreateOrConnectWithoutCategoryInput[]
  upsert?: Prisma.TransactionSplitUpsertWithWhereUniqueWithoutCategoryInput | Prisma.TransactionSplitUpsertWithWhereUniqueWithoutCategoryInput[]
  createMany?: Prisma.TransactionSplitCreateManyCategoryInputEnvelope
  set?: Prisma.TransactionSplitWhereUniqueInput | Prisma.TransactionSplitWhereUniqueInput[]
  disconnect?: Prisma.TransactionSplitWhereUniqueInput | Prisma.TransactionSplitWhereUniqueInput[]
  delete?: Prisma.TransactionSplitWhereUniqueInput | Prisma.TransactionSplitWhereUniqueInput[]
  connect?: Prisma.TransactionSplitWhereUniqueInput | Prisma.TransactionSplitWhereUniqueInput[]
  update?: Prisma.TransactionSplitUpdateWithWhereUniqueWithoutCategoryInput | Prisma.TransactionSplitUpdateWithWhereUniqueWithoutCategoryInput[]
  updateMany?: Prisma.TransactionSplitUpdateManyWithWhereWithoutCategoryInput | Prisma.TransactionSplitUpdateManyWithWhereWithoutCategoryInput[]
  deleteMany?: Prisma.TransactionSplitScalarWhereInput | Prisma.TransactionSplitScalarWhereInput[]
}

export type TransactionSplitCreateNestedManyWithoutTransactionInput = {
  create?: Prisma.XOR<Prisma.TransactionSplitCreateWithoutTransactionInput, Prisma.TransactionSplitUncheckedCreateWithoutTransactionInput> | Prisma.TransactionSplitCreateWithoutTransactionInput[] | Prisma.TransactionSplitUncheckedCreateWithoutTransactionInput[]
  connectOrCreate?: Prisma.TransactionSplitCreateOrConnectWithoutTransactionInput | Prisma.TransactionSplitCreateOrConnectWithoutTransactionInput[]
  createMany?: Prisma.TransactionSplitCreateManyTransactionInputEnvelope
  connect?: Prisma.TransactionSplitWhereUniqueInput | Prisma.TransactionSplitWhereUniqueInput[]
}

export type TransactionSplitUncheckedCreateNestedManyWithoutTransactionInput = {
  create?: Prisma.XOR<Prisma.TransactionSplitCreateWithoutTransactionInput, Prisma.TransactionSplitUncheckedCreateWithoutTransactionInput> | Prisma.TransactionSplitCreateWithoutTransactionInput[] | Prisma.TransactionSplitUncheckedCreateWithoutTransactionInput[]
  connectOrCreate?: Prisma.TransactionSplitCreateOrConnectWithoutTransactionInput | Prisma.TransactionSplitCreateOrConnectWithoutTransactionInput[]
  createMany?: Prisma.TransactionSplitCreateManyTransactionInputEnvelope
  connect?: Prisma.TransactionSplitWhereUniqueInput | Prisma.TransactionSplitWhereUniqueInput[]
}

export type TransactionSplitUpdateManyWithoutTransactionNestedInput = {
  create?: Prisma.XOR<Prisma.TransactionSplitCreateWithoutTransactionInput, Prisma.TransactionSplitUncheckedCreateWithoutTransactionInput> | Prisma.TransactionSplitCreateWithoutTransactionInput[] | Prisma.TransactionSplitUncheckedCreateWithoutTransactionInput[]
  connectOrCreate?: Prisma.TransactionSplitCreateOrConnectWithoutTransactionInput | Prisma.TransactionSplitCreateOrConnectWithoutTransactionInput[]
  upsert?: Prisma.TransactionSplitUpsertWithWhereUniqueWithoutTransactionInput | Prisma.TransactionSplitUpsertWithWhereUniqueWithoutTransactionInput[]
  createMany?: Prisma.TransactionSplitCreateManyTransactionInputEnvelope
  set?: Prisma.TransactionSplitWhereUniqueInput | Prisma.TransactionSplitWhereUniqueInput[]
  disconnect?: Prisma.TransactionSplitWhereUniqueInput | Prisma.TransactionSplitWhereUniqueInput[]
  delete?: Prisma.TransactionSplitWhereUniqueInput | Prisma.TransactionSplitWhereUniqueInput[]
  connect?: Prisma.TransactionSplitWhereUniqueInput | Prisma.TransactionSplitWhereUniqueInput[]
  update?: Prisma.TransactionSplitUpdateWithWhereUniqueWithoutTransactionInput | Prisma.TransactionSplitUpdateWithWhereUniqueWithoutTransactionInput[]
  updateMany?: Prisma.TransactionSplitUpdateManyWithWhereWithoutTransactionInput | Prisma.TransactionSplitUpdateManyWithWhereWithoutTransactionInput[]
  deleteMany?: Prisma.TransactionSplitScalarWhereInput | Prisma.TransactionSplitScalarWhereInput[]
}

export type TransactionSplitUncheckedUpdateManyWithoutTransactionNestedInput = {
  create?: Prisma.XOR<Prisma.TransactionSplitCreateWithoutTransactionInput, Prisma.TransactionSplitUncheckedCreateWithoutTransactionInput> | Prisma.TransactionSplitCreateWithoutTransactionInput[] | Prisma.TransactionSplitUncheckedCreateWithoutTransactionInput[]
  connectOrCreate?: Prisma.TransactionSplitCreateOrConnectWithoutTransactionInput | Prisma.TransactionSplitCreateOrConnectWithoutTransactionInput[]
  upsert?: Prisma.TransactionSplitUpsertWithWhereUniqueWithoutTransactionInput | Prisma.TransactionSplitUpsertWithWhereUniqueWithoutTransactionInput[]
  createMany?: Prisma.TransactionSplitCreateManyTransactionInputEnvelope
  set?: Prisma.TransactionSplitWhereUniqueInput | Prisma.TransactionSplitWhereUniqueInput[]
  disconnect?: Prisma.TransactionSplitWhereUniqueInput | Prisma.TransactionSplitWhereUniqueInput[]
  delete?: Prisma.TransactionSplitWhereUniqueInput | Prisma.TransactionSplitWhereUniqueInput[]
  connect?: Prisma.TransactionSplitWhereUniqueInput | Prisma.TransactionSplitWhereUniqueInput[]
  update?: Prisma.TransactionSplitUpdateWithWhereUniqueWithoutTransactionInput | Prisma.TransactionSplitUpdateWithWhereUniqueWithoutTransactionInput[]
  updateMany?: Prisma.TransactionSplitUpdateManyWithWhereWithoutTransactionInput | Prisma.TransactionSplitUpdateManyWithWhereWithoutTransactionInput[]
  deleteMany?: Prisma.TransactionSplitScalarWhereInput | Prisma.TransactionSplitScalarWhereInput[]
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type TransactionSplitCreateWithoutCategoryInput = {
  id?: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  createdAt?: Date | string
  updatedAt?: Date | string
  transaction: Prisma.TransactionCreateNestedOneWithoutSplitsInput
}

export type TransactionSplitUncheckedCreateWithoutCategoryInput = {
  id?: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  transactionId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TransactionSplitCreateOrConnectWithoutCategoryInput = {
  where: Prisma.TransactionSplitWhereUniqueInput
  create: Prisma.XOR<Prisma.TransactionSplitCreateWithoutCategoryInput, Prisma.TransactionSplitUncheckedCreateWithoutCategoryInput>
}

export type TransactionSplitCreateManyCategoryInputEnvelope = {
  data: Prisma.TransactionSplitCreateManyCategoryInput | Prisma.TransactionSplitCreateManyCategoryInput[]
  skipDuplicates?: boolean
}

export type TransactionSplitUpsertWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.TransactionSplitWhereUniqueInput
  update: Prisma.XOR<Prisma.TransactionSplitUpdateWithoutCategoryInput, Prisma.TransactionSplitUncheckedUpdateWithoutCategoryInput>
  create: Prisma.XOR<Prisma.TransactionSplitCreateWithoutCategoryInput, Prisma.TransactionSplitUncheckedCreateWithoutCategoryInput>
}

export type TransactionSplitUpdateWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.TransactionSplitWhereUniqueInput
  data: Prisma.XOR<Prisma.TransactionSplitUpdateWithoutCategoryInput, Prisma.TransactionSplitUncheckedUpdateWithoutCategoryInput>
}

export type TransactionSplitUpdateManyWithWhereWithoutCategoryInput = {
  where: Prisma.TransactionSplitScalarWhereInput
  data: Prisma.XOR<Prisma.TransactionSplitUpdateManyMutationInput, Prisma.TransactionSplitUncheckedUpdateManyWithoutCategoryInput>
}

export type TransactionSplitScalarWhereInput = {
  AND?: Prisma.TransactionSplitScalarWhereInput | Prisma.TransactionSplitScalarWhereInput[]
  OR?: Prisma.TransactionSplitScalarWhereInput[]
  NOT?: Prisma.TransactionSplitScalarWhereInput | Prisma.TransactionSplitScalarWhereInput[]
  id?: Prisma.StringFilter<"TransactionSplit"> | string
  amount?: Prisma.DecimalFilter<"TransactionSplit"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  transactionId?: Prisma.StringFilter<"TransactionSplit"> | string
  categoryId?: Prisma.StringNullableFilter<"TransactionSplit"> | string | null
  createdAt?: Prisma.DateTimeFilter<"TransactionSplit"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TransactionSplit"> | Date | string
}

export type TransactionSplitCreateWithoutTransactionInput = {
  id?: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  createdAt?: Date | string
  updatedAt?: Date | string
  category?: Prisma.CategoryCreateNestedOneWithoutTransactionsInput
}

export type TransactionSplitUncheckedCreateWithoutTransactionInput = {
  id?: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  categoryId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TransactionSplitCreateOrConnectWithoutTransactionInput = {
  where: Prisma.TransactionSplitWhereUniqueInput
  create: Prisma.XOR<Prisma.TransactionSplitCreateWithoutTransactionInput, Prisma.TransactionSplitUncheckedCreateWithoutTransactionInput>
}

export type TransactionSplitCreateManyTransactionInputEnvelope = {
  data: Prisma.TransactionSplitCreateManyTransactionInput | Prisma.TransactionSplitCreateManyTransactionInput[]
  skipDuplicates?: boolean
}

export type TransactionSplitUpsertWithWhereUniqueWithoutTransactionInput = {
  where: Prisma.TransactionSplitWhereUniqueInput
  update: Prisma.XOR<Prisma.TransactionSplitUpdateWithoutTransactionInput, Prisma.TransactionSplitUncheckedUpdateWithoutTransactionInput>
  create: Prisma.XOR<Prisma.TransactionSplitCreateWithoutTransactionInput, Prisma.TransactionSplitUncheckedCreateWithoutTransactionInput>
}

export type TransactionSplitUpdateWithWhereUniqueWithoutTransactionInput = {
  where: Prisma.TransactionSplitWhereUniqueInput
  data: Prisma.XOR<Prisma.TransactionSplitUpdateWithoutTransactionInput, Prisma.TransactionSplitUncheckedUpdateWithoutTransactionInput>
}

export type TransactionSplitUpdateManyWithWhereWithoutTransactionInput = {
  where: Prisma.TransactionSplitScalarWhereInput
  data: Prisma.XOR<Prisma.TransactionSplitUpdateManyMutationInput, Prisma.TransactionSplitUncheckedUpdateManyWithoutTransactionInput>
}

export type TransactionSplitCreateManyCategoryInput = {
  id?: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  transactionId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TransactionSplitUpdateWithoutCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transaction?: Prisma.TransactionUpdateOneRequiredWithoutSplitsNestedInput
}

export type TransactionSplitUncheckedUpdateWithoutCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  transactionId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransactionSplitUncheckedUpdateManyWithoutCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  transactionId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransactionSplitCreateManyTransactionInput = {
  id?: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  categoryId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TransactionSplitUpdateWithoutTransactionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  category?: Prisma.CategoryUpdateOneWithoutTransactionsNestedInput
}

export type TransactionSplitUncheckedUpdateWithoutTransactionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  categoryId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransactionSplitUncheckedUpdateManyWithoutTransactionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  categoryId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type TransactionSplitSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  amount?: boolean
  transactionId?: boolean
  categoryId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  transaction?: boolean | Prisma.TransactionDefaultArgs<ExtArgs>
  category?: boolean | Prisma.TransactionSplit$categoryArgs<ExtArgs>
}, ExtArgs["result"]["transactionSplit"]>

export type TransactionSplitSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  amount?: boolean
  transactionId?: boolean
  categoryId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  transaction?: boolean | Prisma.TransactionDefaultArgs<ExtArgs>
  category?: boolean | Prisma.TransactionSplit$categoryArgs<ExtArgs>
}, ExtArgs["result"]["transactionSplit"]>

export type TransactionSplitSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  amount?: boolean
  transactionId?: boolean
  categoryId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  transaction?: boolean | Prisma.TransactionDefaultArgs<ExtArgs>
  category?: boolean | Prisma.TransactionSplit$categoryArgs<ExtArgs>
}, ExtArgs["result"]["transactionSplit"]>

export type TransactionSplitSelectScalar = {
  id?: boolean
  amount?: boolean
  transactionId?: boolean
  categoryId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TransactionSplitOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "amount" | "transactionId" | "categoryId" | "createdAt" | "updatedAt", ExtArgs["result"]["transactionSplit"]>
export type TransactionSplitInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transaction?: boolean | Prisma.TransactionDefaultArgs<ExtArgs>
  category?: boolean | Prisma.TransactionSplit$categoryArgs<ExtArgs>
}
export type TransactionSplitIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transaction?: boolean | Prisma.TransactionDefaultArgs<ExtArgs>
  category?: boolean | Prisma.TransactionSplit$categoryArgs<ExtArgs>
}
export type TransactionSplitIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transaction?: boolean | Prisma.TransactionDefaultArgs<ExtArgs>
  category?: boolean | Prisma.TransactionSplit$categoryArgs<ExtArgs>
}

export type $TransactionSplitPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TransactionSplit"
  objects: {
    transaction: Prisma.$TransactionPayload<ExtArgs>
    category: Prisma.$CategoryPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    amount: runtime.Decimal
    transactionId: string
    categoryId: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["transactionSplit"]>
  composites: {}
}

export type TransactionSplitGetPayload<S extends boolean | null | undefined | TransactionSplitDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TransactionSplitPayload, S>

export type TransactionSplitCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TransactionSplitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TransactionSplitCountAggregateInputType | true
  }

export interface TransactionSplitDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TransactionSplit'], meta: { name: 'TransactionSplit' } }
  /**
   * Find zero or one TransactionSplit that matches the filter.
   * @param {TransactionSplitFindUniqueArgs} args - Arguments to find a TransactionSplit
   * @example
   * // Get one TransactionSplit
   * const transactionSplit = await prisma.transactionSplit.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TransactionSplitFindUniqueArgs>(args: Prisma.SelectSubset<T, TransactionSplitFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TransactionSplitClient<runtime.Types.Result.GetResult<Prisma.$TransactionSplitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TransactionSplit that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TransactionSplitFindUniqueOrThrowArgs} args - Arguments to find a TransactionSplit
   * @example
   * // Get one TransactionSplit
   * const transactionSplit = await prisma.transactionSplit.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TransactionSplitFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TransactionSplitFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TransactionSplitClient<runtime.Types.Result.GetResult<Prisma.$TransactionSplitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TransactionSplit that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionSplitFindFirstArgs} args - Arguments to find a TransactionSplit
   * @example
   * // Get one TransactionSplit
   * const transactionSplit = await prisma.transactionSplit.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TransactionSplitFindFirstArgs>(args?: Prisma.SelectSubset<T, TransactionSplitFindFirstArgs<ExtArgs>>): Prisma.Prisma__TransactionSplitClient<runtime.Types.Result.GetResult<Prisma.$TransactionSplitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TransactionSplit that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionSplitFindFirstOrThrowArgs} args - Arguments to find a TransactionSplit
   * @example
   * // Get one TransactionSplit
   * const transactionSplit = await prisma.transactionSplit.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TransactionSplitFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TransactionSplitFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TransactionSplitClient<runtime.Types.Result.GetResult<Prisma.$TransactionSplitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TransactionSplits that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionSplitFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TransactionSplits
   * const transactionSplits = await prisma.transactionSplit.findMany()
   * 
   * // Get first 10 TransactionSplits
   * const transactionSplits = await prisma.transactionSplit.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const transactionSplitWithIdOnly = await prisma.transactionSplit.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TransactionSplitFindManyArgs>(args?: Prisma.SelectSubset<T, TransactionSplitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionSplitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TransactionSplit.
   * @param {TransactionSplitCreateArgs} args - Arguments to create a TransactionSplit.
   * @example
   * // Create one TransactionSplit
   * const TransactionSplit = await prisma.transactionSplit.create({
   *   data: {
   *     // ... data to create a TransactionSplit
   *   }
   * })
   * 
   */
  create<T extends TransactionSplitCreateArgs>(args: Prisma.SelectSubset<T, TransactionSplitCreateArgs<ExtArgs>>): Prisma.Prisma__TransactionSplitClient<runtime.Types.Result.GetResult<Prisma.$TransactionSplitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TransactionSplits.
   * @param {TransactionSplitCreateManyArgs} args - Arguments to create many TransactionSplits.
   * @example
   * // Create many TransactionSplits
   * const transactionSplit = await prisma.transactionSplit.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TransactionSplitCreateManyArgs>(args?: Prisma.SelectSubset<T, TransactionSplitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TransactionSplits and returns the data saved in the database.
   * @param {TransactionSplitCreateManyAndReturnArgs} args - Arguments to create many TransactionSplits.
   * @example
   * // Create many TransactionSplits
   * const transactionSplit = await prisma.transactionSplit.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TransactionSplits and only return the `id`
   * const transactionSplitWithIdOnly = await prisma.transactionSplit.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TransactionSplitCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TransactionSplitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionSplitPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TransactionSplit.
   * @param {TransactionSplitDeleteArgs} args - Arguments to delete one TransactionSplit.
   * @example
   * // Delete one TransactionSplit
   * const TransactionSplit = await prisma.transactionSplit.delete({
   *   where: {
   *     // ... filter to delete one TransactionSplit
   *   }
   * })
   * 
   */
  delete<T extends TransactionSplitDeleteArgs>(args: Prisma.SelectSubset<T, TransactionSplitDeleteArgs<ExtArgs>>): Prisma.Prisma__TransactionSplitClient<runtime.Types.Result.GetResult<Prisma.$TransactionSplitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TransactionSplit.
   * @param {TransactionSplitUpdateArgs} args - Arguments to update one TransactionSplit.
   * @example
   * // Update one TransactionSplit
   * const transactionSplit = await prisma.transactionSplit.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TransactionSplitUpdateArgs>(args: Prisma.SelectSubset<T, TransactionSplitUpdateArgs<ExtArgs>>): Prisma.Prisma__TransactionSplitClient<runtime.Types.Result.GetResult<Prisma.$TransactionSplitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TransactionSplits.
   * @param {TransactionSplitDeleteManyArgs} args - Arguments to filter TransactionSplits to delete.
   * @example
   * // Delete a few TransactionSplits
   * const { count } = await prisma.transactionSplit.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TransactionSplitDeleteManyArgs>(args?: Prisma.SelectSubset<T, TransactionSplitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TransactionSplits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionSplitUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TransactionSplits
   * const transactionSplit = await prisma.transactionSplit.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TransactionSplitUpdateManyArgs>(args: Prisma.SelectSubset<T, TransactionSplitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TransactionSplits and returns the data updated in the database.
   * @param {TransactionSplitUpdateManyAndReturnArgs} args - Arguments to update many TransactionSplits.
   * @example
   * // Update many TransactionSplits
   * const transactionSplit = await prisma.transactionSplit.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TransactionSplits and only return the `id`
   * const transactionSplitWithIdOnly = await prisma.transactionSplit.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TransactionSplitUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TransactionSplitUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionSplitPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TransactionSplit.
   * @param {TransactionSplitUpsertArgs} args - Arguments to update or create a TransactionSplit.
   * @example
   * // Update or create a TransactionSplit
   * const transactionSplit = await prisma.transactionSplit.upsert({
   *   create: {
   *     // ... data to create a TransactionSplit
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TransactionSplit we want to update
   *   }
   * })
   */
  upsert<T extends TransactionSplitUpsertArgs>(args: Prisma.SelectSubset<T, TransactionSplitUpsertArgs<ExtArgs>>): Prisma.Prisma__TransactionSplitClient<runtime.Types.Result.GetResult<Prisma.$TransactionSplitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TransactionSplits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionSplitCountArgs} args - Arguments to filter TransactionSplits to count.
   * @example
   * // Count the number of TransactionSplits
   * const count = await prisma.transactionSplit.count({
   *   where: {
   *     // ... the filter for the TransactionSplits we want to count
   *   }
   * })
  **/
  count<T extends TransactionSplitCountArgs>(
    args?: Prisma.Subset<T, TransactionSplitCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TransactionSplitCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TransactionSplit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionSplitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TransactionSplitAggregateArgs>(args: Prisma.Subset<T, TransactionSplitAggregateArgs>): Prisma.PrismaPromise<GetTransactionSplitAggregateType<T>>

  /**
   * Group by TransactionSplit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionSplitGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TransactionSplitGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TransactionSplitGroupByArgs['orderBy'] }
      : { orderBy?: TransactionSplitGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TransactionSplitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionSplitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TransactionSplit model
 */
readonly fields: TransactionSplitFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TransactionSplit.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TransactionSplitClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  transaction<T extends Prisma.TransactionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TransactionDefaultArgs<ExtArgs>>): Prisma.Prisma__TransactionClient<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  category<T extends Prisma.TransactionSplit$categoryArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TransactionSplit$categoryArgs<ExtArgs>>): Prisma.Prisma__CategoryClient<runtime.Types.Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TransactionSplit model
 */
export interface TransactionSplitFieldRefs {
  readonly id: Prisma.FieldRef<"TransactionSplit", 'String'>
  readonly amount: Prisma.FieldRef<"TransactionSplit", 'Decimal'>
  readonly transactionId: Prisma.FieldRef<"TransactionSplit", 'String'>
  readonly categoryId: Prisma.FieldRef<"TransactionSplit", 'String'>
  readonly createdAt: Prisma.FieldRef<"TransactionSplit", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"TransactionSplit", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TransactionSplit findUnique
 */
export type TransactionSplitFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionSplit
   */
  select?: Prisma.TransactionSplitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionSplit
   */
  omit?: Prisma.TransactionSplitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionSplitInclude<ExtArgs> | null
  /**
   * Filter, which TransactionSplit to fetch.
   */
  where: Prisma.TransactionSplitWhereUniqueInput
}

/**
 * TransactionSplit findUniqueOrThrow
 */
export type TransactionSplitFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionSplit
   */
  select?: Prisma.TransactionSplitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionSplit
   */
  omit?: Prisma.TransactionSplitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionSplitInclude<ExtArgs> | null
  /**
   * Filter, which TransactionSplit to fetch.
   */
  where: Prisma.TransactionSplitWhereUniqueInput
}

/**
 * TransactionSplit findFirst
 */
export type TransactionSplitFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionSplit
   */
  select?: Prisma.TransactionSplitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionSplit
   */
  omit?: Prisma.TransactionSplitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionSplitInclude<ExtArgs> | null
  /**
   * Filter, which TransactionSplit to fetch.
   */
  where?: Prisma.TransactionSplitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TransactionSplits to fetch.
   */
  orderBy?: Prisma.TransactionSplitOrderByWithRelationInput | Prisma.TransactionSplitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TransactionSplits.
   */
  cursor?: Prisma.TransactionSplitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TransactionSplits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TransactionSplits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TransactionSplits.
   */
  distinct?: Prisma.TransactionSplitScalarFieldEnum | Prisma.TransactionSplitScalarFieldEnum[]
}

/**
 * TransactionSplit findFirstOrThrow
 */
export type TransactionSplitFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionSplit
   */
  select?: Prisma.TransactionSplitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionSplit
   */
  omit?: Prisma.TransactionSplitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionSplitInclude<ExtArgs> | null
  /**
   * Filter, which TransactionSplit to fetch.
   */
  where?: Prisma.TransactionSplitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TransactionSplits to fetch.
   */
  orderBy?: Prisma.TransactionSplitOrderByWithRelationInput | Prisma.TransactionSplitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TransactionSplits.
   */
  cursor?: Prisma.TransactionSplitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TransactionSplits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TransactionSplits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TransactionSplits.
   */
  distinct?: Prisma.TransactionSplitScalarFieldEnum | Prisma.TransactionSplitScalarFieldEnum[]
}

/**
 * TransactionSplit findMany
 */
export type TransactionSplitFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionSplit
   */
  select?: Prisma.TransactionSplitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionSplit
   */
  omit?: Prisma.TransactionSplitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionSplitInclude<ExtArgs> | null
  /**
   * Filter, which TransactionSplits to fetch.
   */
  where?: Prisma.TransactionSplitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TransactionSplits to fetch.
   */
  orderBy?: Prisma.TransactionSplitOrderByWithRelationInput | Prisma.TransactionSplitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TransactionSplits.
   */
  cursor?: Prisma.TransactionSplitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TransactionSplits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TransactionSplits.
   */
  skip?: number
  distinct?: Prisma.TransactionSplitScalarFieldEnum | Prisma.TransactionSplitScalarFieldEnum[]
}

/**
 * TransactionSplit create
 */
export type TransactionSplitCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionSplit
   */
  select?: Prisma.TransactionSplitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionSplit
   */
  omit?: Prisma.TransactionSplitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionSplitInclude<ExtArgs> | null
  /**
   * The data needed to create a TransactionSplit.
   */
  data: Prisma.XOR<Prisma.TransactionSplitCreateInput, Prisma.TransactionSplitUncheckedCreateInput>
}

/**
 * TransactionSplit createMany
 */
export type TransactionSplitCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TransactionSplits.
   */
  data: Prisma.TransactionSplitCreateManyInput | Prisma.TransactionSplitCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TransactionSplit createManyAndReturn
 */
export type TransactionSplitCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionSplit
   */
  select?: Prisma.TransactionSplitSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionSplit
   */
  omit?: Prisma.TransactionSplitOmit<ExtArgs> | null
  /**
   * The data used to create many TransactionSplits.
   */
  data: Prisma.TransactionSplitCreateManyInput | Prisma.TransactionSplitCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionSplitIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TransactionSplit update
 */
export type TransactionSplitUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionSplit
   */
  select?: Prisma.TransactionSplitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionSplit
   */
  omit?: Prisma.TransactionSplitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionSplitInclude<ExtArgs> | null
  /**
   * The data needed to update a TransactionSplit.
   */
  data: Prisma.XOR<Prisma.TransactionSplitUpdateInput, Prisma.TransactionSplitUncheckedUpdateInput>
  /**
   * Choose, which TransactionSplit to update.
   */
  where: Prisma.TransactionSplitWhereUniqueInput
}

/**
 * TransactionSplit updateMany
 */
export type TransactionSplitUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TransactionSplits.
   */
  data: Prisma.XOR<Prisma.TransactionSplitUpdateManyMutationInput, Prisma.TransactionSplitUncheckedUpdateManyInput>
  /**
   * Filter which TransactionSplits to update
   */
  where?: Prisma.TransactionSplitWhereInput
  /**
   * Limit how many TransactionSplits to update.
   */
  limit?: number
}

/**
 * TransactionSplit updateManyAndReturn
 */
export type TransactionSplitUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionSplit
   */
  select?: Prisma.TransactionSplitSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionSplit
   */
  omit?: Prisma.TransactionSplitOmit<ExtArgs> | null
  /**
   * The data used to update TransactionSplits.
   */
  data: Prisma.XOR<Prisma.TransactionSplitUpdateManyMutationInput, Prisma.TransactionSplitUncheckedUpdateManyInput>
  /**
   * Filter which TransactionSplits to update
   */
  where?: Prisma.TransactionSplitWhereInput
  /**
   * Limit how many TransactionSplits to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionSplitIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TransactionSplit upsert
 */
export type TransactionSplitUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionSplit
   */
  select?: Prisma.TransactionSplitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionSplit
   */
  omit?: Prisma.TransactionSplitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionSplitInclude<ExtArgs> | null
  /**
   * The filter to search for the TransactionSplit to update in case it exists.
   */
  where: Prisma.TransactionSplitWhereUniqueInput
  /**
   * In case the TransactionSplit found by the `where` argument doesn't exist, create a new TransactionSplit with this data.
   */
  create: Prisma.XOR<Prisma.TransactionSplitCreateInput, Prisma.TransactionSplitUncheckedCreateInput>
  /**
   * In case the TransactionSplit was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TransactionSplitUpdateInput, Prisma.TransactionSplitUncheckedUpdateInput>
}

/**
 * TransactionSplit delete
 */
export type TransactionSplitDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionSplit
   */
  select?: Prisma.TransactionSplitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionSplit
   */
  omit?: Prisma.TransactionSplitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionSplitInclude<ExtArgs> | null
  /**
   * Filter which TransactionSplit to delete.
   */
  where: Prisma.TransactionSplitWhereUniqueInput
}

/**
 * TransactionSplit deleteMany
 */
export type TransactionSplitDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TransactionSplits to delete
   */
  where?: Prisma.TransactionSplitWhereInput
  /**
   * Limit how many TransactionSplits to delete.
   */
  limit?: number
}

/**
 * TransactionSplit.category
 */
export type TransactionSplit$categoryArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Category
   */
  select?: Prisma.CategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Category
   */
  omit?: Prisma.CategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CategoryInclude<ExtArgs> | null
  where?: Prisma.CategoryWhereInput
}

/**
 * TransactionSplit without action
 */
export type TransactionSplitDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionSplit
   */
  select?: Prisma.TransactionSplitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionSplit
   */
  omit?: Prisma.TransactionSplitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionSplitInclude<ExtArgs> | null
}
